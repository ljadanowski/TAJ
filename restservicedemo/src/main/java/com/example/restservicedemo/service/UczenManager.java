package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Uczen;

public class UczenManager {
	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_UCZEN = "CREATE TABLE Uczen(id bigint GENERATED BY DEFAULT AS IDENTITY, nazwisko varchar(20), integer wiek, id_nauczyciel bigint";

	private PreparedStatement addUczenStmt;
	private PreparedStatement deleteAllUczenStmt;
	private PreparedStatement getAllUczenStmt;
	private PreparedStatement getUczenByIdStmt;

	private Statement statement;

	public UczenManager() 
	{
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Uczen".equalsIgnoreCase(rs.getString("TABLE_NAME"))) 
				{
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_UCZEN);

			addUczenStmt = connection
					.prepareStatement("INSERT INTO Uczen (nazwisko, wiek) VALUES (? ?)");
			deleteAllUczenStmt = connection
					.prepareStatement("DELETE FROM Uczen");
			getAllUczenStmt = connection
					.prepareStatement("SELECT id, nazwisko, wiek, id_uczen FROM Uczen");
			getUczenByIdStmt = connection
					.prepareStatement("SELECT id, nazwisko, wiek, id_uczen FROM Uczen where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() 
	{
		return connection;
	}

	void clearUczen() 
	{
		try {
			deleteAllUczenStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addUczen(Uczen Uczen) {
		int count = 0;
		try {
			addUczenStmt.setString(1, Uczen.getNazwisko());
			addUczenStmt.setInt(2, Uczen.getWiek());
			count = addUczenStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Uczen> getAllUczen() {
		List<Uczen> uczniowie = new ArrayList<Uczen>();

		try {
			ResultSet rs = getAllUczenStmt.executeQuery();

			while (rs.next()) {
				Uczen u = new Uczen();
				u.setId(rs.getInt("id"));
				u.setNazwisko(rs.getString("nazwa"));
				u.setWiek(rs.getInt("wiek"));
				uczniowie.add(u);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return uczniowie;
	}

	public Uczen getUczen(Long id) {
		Uczen u = new Uczen();
		try {
			getUczenByIdStmt.setLong(1, id);
			ResultSet rs = getUczenByIdStmt.executeQuery();

			while (rs.next()) {
				u.setId(rs.getLong("id"));
				u.setNazwisko(rs.getString("nazwisko"));
				u.setWiek(rs.getInt("wiek"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return u;
	}

}
